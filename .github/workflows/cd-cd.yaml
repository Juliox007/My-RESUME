name: build push and deploy
on:
  push:
    branches: 
      - main
   pull_request:
    branches:
      - main
   permissions: 
    id-token: write 
    contents: read
    # Required for the workflow to run
env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_CREDENTIAL_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{github.run_number}}
jobs:
    Build:
      runs-on: ubuntu-latest # Use the latest Ubuntu runner ghithub runners provide
      steps:
        - name: Checkout code or clone repository
          uses: actions/checkout@v3

        - name: Aws credential setup
          uses: aws-actions/configure-aws-credentials@v4
            with:
               role-to-assume: ${{ env.AWS_ROLE }}   #OIDC of the role to assume
               aws-region: ${{ env.AWS_REGION }}
         
        - name: Loging to ecr
          uses: aws-actions/amazon-ecr-login@v1
          id: ecr-login
          

        - name: Build, tag, and push Docker image
          id: build-and-push
            run: |
                docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{env.IMAGE_TAG}} .
               
                

        - name: Scan dokcer Image for vulnerabilities
          uses: aquasecurity/trivy-action@master
            with:
               image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{env.IMAGE_TAG}}"  # Scans the built image
               format: "table"
               exit-code: "1"
               severity: "CRITICAL,HIGH"
        - name: push to ECR
          run: |
            docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{env.IMAGE_TAG}}
        - name: Store image tag in GitHub environment
          run: echo "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV
          
     Deploy:
      runs-on: ubuntu-latest
      needs: Build
      steps:
        - name: SSH to Server
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{secrets.HOST}}
            username: ${{vars.username}}
            key: ${{secrets.KEY}}
            script: |
              docker stop resume || echo "No running container to stop"
              docker rm resume || echo "No container to remove"
              docker run -d --name resume -p 8081:5001 ${{ steps.build-and-push.outputs.image }}    